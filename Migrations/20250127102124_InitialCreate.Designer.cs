// <auto-generated />
using GGStat_Backend.data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GGStat_Backend.Migrations
{
    [DbContext(typeof(PlayersDBContext))]
    [Migration("20250127102124_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GGStat_Backend.models.Chat", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("MatchId")
                        .HasColumnType("integer");

                    b.Property<string>("message")
                        .HasColumnType("text");

                    b.Property<string>("player")
                        .HasColumnType("text");

                    b.Property<string>("time")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("MatchId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("GGStat_Backend.models.CountryInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("flag")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("CountryInfos");
                });

            modelBuilder.Entity("GGStat_Backend.models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("PlayerDataId")
                        .HasColumnType("integer");

                    b.Property<string>("duration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("map")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("match_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("match_link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("opponent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("opponent_race")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("player_race")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("points")
                        .HasColumnType("integer");

                    b.Property<string>("result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("timeAgo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlayerDataId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("GGStat_Backend.models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("alias")
                        .HasColumnType("text");

                    b.Property<string>("avatar")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("region")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("GGStat_Backend.models.PlayerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("countryid")
                        .HasColumnType("integer");

                    b.Property<int>("loses")
                        .HasColumnType("integer");

                    b.Property<int>("playerId")
                        .HasColumnType("integer");

                    b.Property<string>("race")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("rankId")
                        .HasColumnType("integer");

                    b.Property<int>("standing")
                        .HasColumnType("integer");

                    b.Property<int>("wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("countryid");

                    b.HasIndex("playerId");

                    b.HasIndex("rankId");

                    b.ToTable("PlayerDatas");
                });

            modelBuilder.Entity("GGStat_Backend.models.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("league")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("points")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("GGStat_Backend.models.Chat", b =>
                {
                    b.HasOne("GGStat_Backend.models.Match", null)
                        .WithMany("chat")
                        .HasForeignKey("MatchId");
                });

            modelBuilder.Entity("GGStat_Backend.models.Match", b =>
                {
                    b.HasOne("GGStat_Backend.models.PlayerData", null)
                        .WithMany("matches")
                        .HasForeignKey("PlayerDataId");
                });

            modelBuilder.Entity("GGStat_Backend.models.PlayerData", b =>
                {
                    b.HasOne("GGStat_Backend.models.CountryInfo", "country")
                        .WithMany()
                        .HasForeignKey("countryid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GGStat_Backend.models.Player", "player")
                        .WithMany()
                        .HasForeignKey("playerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GGStat_Backend.models.Rank", "rank")
                        .WithMany()
                        .HasForeignKey("rankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("country");

                    b.Navigation("player");

                    b.Navigation("rank");
                });

            modelBuilder.Entity("GGStat_Backend.models.Match", b =>
                {
                    b.Navigation("chat");
                });

            modelBuilder.Entity("GGStat_Backend.models.PlayerData", b =>
                {
                    b.Navigation("matches");
                });
#pragma warning restore 612, 618
        }
    }
}
